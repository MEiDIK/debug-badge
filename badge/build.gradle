apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
  compile gradleApi()
  compile localGroovy()
}

// best way to set group ID
group = "com.github.yuebinyun.debug-badge"

install {
  repositories.mavenInstaller {
    // only necessary if artifact ID diverges from project name
    // the latter defaults to project directory name and can be
    // configured in settings.gradle
    pom.artifactId = "debug-badge"
    pom.version = '0.1.3'
  }
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}


def getRepositoryUsername() {
  return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
  return hasProperty('nexusPassword') ? nexusPassword : ""
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.artifactId = POM_ARTIFACT_ID

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  task doc(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives doc
    archives sourcesJar
  }
}